[{"title":"数据库","date":"2024-10-21T02:46:51.000Z","url":"/2024/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93/","tags":[["mysql","/tags/mysql/"]],"categories":[["面试","/categories/%E9%9D%A2%E8%AF%95/"]],"content":"三大范式 第一范式1NF：数据库表中所有字段不可再分 第一范式2NF：在第一范式基础上，表中所有字段都完全依赖于主键，不存在部分依赖 第一范式2NF：在第二范式基础上，表中所有字段都直接依赖于主键，不存在间接依赖（传递依赖） 索引类型 按底层数据结构划分： B-Tree索引 哈希索引 R-Tree索引 全文索引 按数据存储方式划分 聚簇索引 非聚簇索引 按应用类型划分 主键索引 普通索引 唯一索引：用于保证列值唯一 联合索引：多个列组成一个索引 覆盖索引：组成索引的字段覆盖了需要查询的字段 全文索引 事务中出现的问题 脏读：事务A先修改再回滚，事务B在事务A回滚之前读，读到的就是脏数据 丢失修改：事务A和事务B同时读取并修改一个数据（例如A&#x3D;A-1），其中一个事务的修改会被覆盖，从而丢失 不可重复读：事务A多次读一个数据，事务B在中间修改或删除数据导致事务A前后读取的数据不一致 幻读：事务A多次读一个数据，事务B在中间插入数据导致事务A读到的数据变多 隔离级别 读取未提交：可能导致脏读、幻读、不可重复读 读取已提交：可能导致幻读、不可重复读 可重复读：可能导致幻读 串行化： "},{"title":"Java并发","date":"2024-10-09T02:52:57.000Z","url":"/2024/10/09/Java%E5%B9%B6%E5%8F%91/","tags":[["Java","/tags/Java/"]],"categories":[["面试","/categories/%E9%9D%A2%E8%AF%95/"]],"content":"创建线程的方式 继承Thread类 实现Runnable接口 实现Callable接口 使用线程池 sleep()和wait()的区别 sleep()是Thread类的静态本地方法，而wait()是Object类的本地方法 sleep()没有释放锁，wait()会释放锁 sleep()重点在于暂停当前线程，wait()重点在于线程间的交互 sleep()必须指定一个时间，时间到了后线程恢复运行，wait()可以选择指定时间，若不指定时间则需要其他线程使用notify()或notifyAll()唤醒 volatile关键字在Java中将变量声明为volatile，表示此变量是多线程共享的，每次读取时都到主存中读取。 乐观锁和悲观锁悲观锁总是假设最坏的情况，每次获取共享资源时先上锁，如果其他线程需要资源就会阻塞。例如Synchronized关键字和ReentrantLock独占锁。 乐观锁总是假设最好的情况，线程获取资源时不上锁，而是在提交修改的时候去验证对应的资源是否被其他线程修改了，例如CAS算法。 悲观锁适合于写操作较多，乐观锁适合于读操作较多。 线程池创建方法 通过ThreadPoolExecutor构造函数传入参数创建 通过Executor框架的工具类Executors创建 线程池参数 拒绝策略 ThreadPoolExecutor.AbortPolicy（默认）：直接拒绝任务并抛出异常 ThreadPoolExecutor.CallerRunsPolicy：调用自己的线程来执行任务 ThreadPoolExecutor.CallerRunsPolicy：直接拒绝任务，不报异常 ThreadPoolExecutor.DiscardOldestPolicy：丢弃掉最早的未处理任务，把新的任务加入队列 "},{"title":"操作系统","date":"2024-10-05T03:48:26.000Z","url":"/2024/10/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","tags":[["线程","/tags/%E7%BA%BF%E7%A8%8B/"]],"categories":[["面试","/categories/%E9%9D%A2%E8%AF%95/"]],"content":"进程和线程 进程是一个程序的实例 线程是轻量级进程，一个进程可以包含多个线程，同一个进程的所有线程可以共享进程的资源（内存空间、文件句柄、网络连接等），每个线程也拥有自己的资源（程序计数器、虚拟机栈、本地方法栈） 线程执行开销小，不利于资源的管理和保护，进程相反 线程间同步方式 互斥锁 读写锁 信号量 屏障 事件：wait&#x2F;notify 进程的状态 创建状态：进程刚被创建，还未就绪 就绪状态：进程处于可以运行并准备运行的状态 运行状态：进程在就绪状态时被分配到cpu就会在cpu上运行，即为运行状态 阻塞状态：进程因等待别的资源或IO操作而暂停运行 结束状态：进程从系统中消失 进程间通信方式 管道&#x2F;匿名管道：父子进程间或兄弟进程间的通信 有名管道：匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。 信号：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生 消息队列：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。 信号量：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。 共享内存 套接字 僵尸进程和孤儿进程 僵尸进程：子进程已经终止，但是其父进程仍在运行，且父进程没有调用 wait()或 waitpid()等系统调用来获取子进程的状态信息，释放子进程占用的资源，导致子进程的 PCB 依然存在于系统中，但无法被进一步使用。这种情况下，子进程被称为“僵尸进程”。避免僵尸进程的产生，父进程需要及时调用 wait()或 waitpid()系统调用来回收子进程。 孤儿进程：一个进程的父进程已经终止或者不存在，但是该进程仍在运行。这种情况下，该进程就是孤儿进程。孤儿进程通常是由于父进程意外终止或未及时调用 wait()或 waitpid()等系统调用来回收子进程导致的。为了避免孤儿进程占用系统资源，操作系统会将孤儿进程的父进程设置为 init 进程（进程号为 1），由 init 进程来回收孤儿进程的资源。 死锁 死锁：多个进程或线程同时阻塞，都在等待资源释放。由于进程&#x2F;线程被无限阻塞，因此程序不可能正常终止。 死锁的必要条件 互斥：资源不能被共享，同一时间只能有一个进程或线程使用。 非抢占：资源不能被抢占，当前正在使用的进程或线程用完后才会被释放。 占有并等待 循环等待 如何解决死锁从四个条件入手： 解决互斥：使得资源可以同时被多个线程或进程使用，缺点是很多资源是必须独享的 解决非抢占：采用剥夺式调度算法，缺点是会导致资源利用率下降。 这两种都不太适合 解决占有并等待和循环等待： 静态分配：让进程或线程执行前先获取到所有需要的资源，缺点是会降低资源利用率 层次分配： 使用算法（例如银行家算法）判断线程是否安全，若能够进入到安全的状态，则就 真的分配资源给该进程 "},{"title":"c++笔记","date":"2024-07-16T04:01:13.000Z","url":"/2024/07/16/c-%E7%AC%94%E8%AE%B0/","tags":[["c++","/tags/c/"]],"categories":[["undefined",""]],"content":"容器哈希表数量少用unordered_set&lt;&gt; 数量多用set&lt;&gt;"},{"title":"mysql使用规范","date":"2024-06-20T01:01:46.000Z","url":"/2024/06/20/mysql%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/","tags":[["mysql","/tags/mysql/"]],"categories":[["笔记","/categories/%E7%AC%94%E8%AE%B0/"]],"content":"转载自：技术同学必会的MySQL设计规约，都是惨痛的教训 sss"},{"title":"树-代码模板","date":"2024-06-14T22:21:24.000Z","url":"/2024/06/15/%E6%A0%91-%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/","tags":[["c++","/tags/c/"],["树","/tags/%E6%A0%91/"]],"categories":[["代码模板","/categories/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"]],"content":"线段树普通写法建树。。。 ZKW线段树利用位运算。。 字典树（前缀树）"},{"title":"markdown文件插入图片","date":"2024-06-14T07:33:43.000Z","url":"/2024/06/14/markdown%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/","tags":[["hexo","/tags/hexo/"],["markdown","/tags/markdown/"]],"categories":[["笔记","/categories/%E7%AC%94%E8%AE%B0/"]],"content":"参考： 直接粘贴图片到md文件 右键保存到hexo文章对应的文件夹 修改图片链接为相对路径： "},{"title":"图片测试","date":"2024-06-14T07:26:53.000Z","url":"/2024/06/14/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/","tags":[["test","/tags/test/"]],"categories":[["undefined",""]],"content":"1 way1 1ss"},{"title":"hexo使用说明","date":"2024-06-14T06:44:15.000Z","url":"/2024/06/14/hexo%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","tags":[["hexo","/tags/hexo/"]],"categories":[["笔记","/categories/%E7%AC%94%E8%AE%B0/"]],"content":"环境初始化 下载安装git。。。 下载安装node.js… 把项目clone到本地 项目根目录安装hexo 新建文章 部署 上传到github"},{"title":"markdown语法参考","date":"2023-08-04T07:47:34.000Z","url":"/2023/08/04/markdown%E5%8F%82%E8%80%83/","tags":[["markdown","/tags/markdown/"]],"categories":[["笔记","/categories/%E7%AC%94%E8%AE%B0/"]],"content":" 标题用一到六个 ‘#’ 加一个空格接标题内容 字体星号或下划线包裹内容，单是斜体，双是粗体，三是粗斜体 写法 效果 *这是斜体* 这是斜体 _这是斜体_ 这是斜体 *这是粗体* 这是粗体 _这是粗体_ 这是粗体 *这是粗斜体* 这是粗斜体 _这是粗斜体_ 这是粗斜体 ~~这是删除线~~ 这是删除线 &lt;u&gt;这是下划线 这是下划线 表格用 ‘|’ 字符分隔内容即可 ctrl+enter自动添加新行 换行 直接在一句话后敲两个空格 两句话之间加一个空行 如果你在编辑的时候，想让一行文字在显示的时候换行，就在中间加&lt;br/&gt; 三个 &#96; （飘号）对应文本框，效果： `&#96;&#96;文本 摘要标记符 任意位置添加，之前的内容为摘要，在hexo中可用post.excerpt获取。 代码标记 效果：dsada print() sss 分隔线一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线 效果： 强调使用星号和下划线作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 标签包围，用两个或_包起来的话，则会被加粗 效果： qqq qqq qqq qqq 链接 link  引用在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。 qq 111 222 333 列表无序列表 q q q q q q q q q 有序列表 q q q "},{"title":"pht","date":"2023-07-31T07:58:08.000Z","url":"/2023/07/31/pht/","tags":[["phote","/tags/phote/"]],"categories":[["undefined",""]],"content":"#1 phone ds ddd dasd ddogg qq"},{"title":"Hello World","date":"2023-07-29T09:49:07.107Z","url":"/2023/07/29/hello-world/","categories":[["hello","/categories/hello/"]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]