<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yz</title>
  
  
  <link href="https://qun-qq.github.io/atom.xml" rel="self"/>
  
  <link href="https://qun-qq.github.io/"/>
  <updated>2024-10-21T03:39:36.756Z</updated>
  <id>https://qun-qq.github.io/</id>
  
  <author>
    <name>CYQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库</title>
    <link href="https://qun-qq.github.io/2024/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://qun-qq.github.io/2024/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-10-21T02:46:51.000Z</published>
    <updated>2024-10-21T03:39:36.756Z</updated>
    
    <content type="html"><![CDATA[<h4 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h4><ol><li>第一范式<strong>1NF</strong>：数据库表中所有字段不可再分</li><li>第一范式<strong>2NF</strong>：在第一范式基础上，表中所有字段都完全依赖于主键，不存在部分依赖</li><li>第一范式<strong>2NF</strong>：在第二范式基础上，表中所有字段都直接依赖于主键，不存在间接依赖（传递依赖）</li></ol><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><ul><li>按底层数据结构划分：<ul><li>B-Tree索引</li><li>哈希索引</li><li>R-Tree索引</li><li>全文索引</li></ul></li><li>按数据存储方式划分<ul><li>聚簇索引</li><li>非聚簇索引</li></ul></li><li>按应用类型划分<ul><li>主键索引</li><li>普通索引</li><li>唯一索引：用于保证列值唯一</li><li>联合索引：多个列组成一个索引</li><li>覆盖索引：组成索引的字段覆盖了需要查询的字段</li><li>全文索引</li></ul></li></ul><h4 id="事务中出现的问题"><a href="#事务中出现的问题" class="headerlink" title="事务中出现的问题"></a>事务中出现的问题</h4><ul><li>脏读：事务A先修改再回滚，事务B在事务A回滚之前读，读到的就是脏数据</li><li>丢失修改：事务A和事务B同时读取并修改一个数据（例如A&#x3D;A-1），其中一个事务的修改会被覆盖，从而丢失</li><li>不可重复读：事务A多次读一个数据，事务B在中间<strong>修改</strong>或<strong>删除</strong>数据导致事务A前后读取的数据不一致</li><li>幻读：事务A多次读一个数据，事务B在中间<strong>插入</strong>数据导致事务A读到的数据变多</li></ul><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li>读取未提交：可能导致脏读、幻读、不可重复读</li><li>读取已提交：可能导致幻读、不可重复读</li><li>可重复读：可能导致幻读</li><li>串行化：</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;三大范式&quot;&gt;&lt;a href=&quot;#三大范式&quot; class=&quot;headerlink&quot; title=&quot;三大范式&quot;&gt;&lt;/a&gt;三大范式&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;第一范式&lt;strong&gt;1NF&lt;/strong&gt;：数据库表中所有字段不可再分&lt;/li&gt;
&lt;li&gt;第一范式&lt;str</summary>
      
    
    
    
    <category term="面试" scheme="https://qun-qq.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="mysql" scheme="https://qun-qq.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java并发</title>
    <link href="https://qun-qq.github.io/2024/10/09/Java%E5%B9%B6%E5%8F%91/"/>
    <id>https://qun-qq.github.io/2024/10/09/Java%E5%B9%B6%E5%8F%91/</id>
    <published>2024-10-09T02:52:57.000Z</published>
    <updated>2024-10-21T03:47:58.508Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h4><ol><li>继承<strong>Thread</strong>类</li><li>实现<strong>Runnable</strong>接口</li><li>实现<strong>Callable</strong>接口</li><li>使用<strong>线程池</strong></li></ol><h4 id="sleep-和wait-的区别"><a href="#sleep-和wait-的区别" class="headerlink" title="sleep()和wait()的区别"></a>sleep()和wait()的区别</h4><ul><li>sleep()是Thread类的静态本地方法，而wait()是Object类的本地方法</li><li>sleep()没有释放锁，wait()会释放锁</li><li>sleep()重点在于暂停当前线程，wait()重点在于线程间的交互</li><li>sleep()必须指定一个时间，时间到了后线程恢复运行，wait()可以选择指定时间，若不指定时间则需要其他线程使用notify()或notifyAll()唤醒</li></ul><h4 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h4><p>在Java中将变量声明为<strong>volatile</strong>，表示此变量是多线程共享的，每次读取时都到<strong>主存</strong>中读取。</p><h4 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h4><p>悲观锁总是假设最坏的情况，每次获取共享资源时先上锁，如果其他线程需要资源就会阻塞。例如<strong>Synchronized关键字</strong>和<strong>ReentrantLock独占锁</strong>。</p><p>乐观锁总是假设最好的情况，线程获取资源时不上锁，而是在提交修改的时候去验证对应的资源是否被其他线程修改了，例如<strong>CAS算法</strong>。</p><p>悲观锁适合于写操作较多，乐观锁适合于读操作较多。</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h5 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h5><ol><li>通过<strong>ThreadPoolExecutor</strong>构造函数传入参数创建</li><li>通过Executor框架的工具类Executors创建</li></ol><h5 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(</span><br><span class="line">int corePoolSize,//线程池的核心线程数量</span><br><span class="line">    int maximumPoolSize,//线程池的最大线程数</span><br><span class="line">    long keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span><br><span class="line">    TimeUnit unit,//时间单位</span><br><span class="line">    BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span><br><span class="line">    ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span><br><span class="line">    RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务) </span><br></pre></td></tr></table></figure><h5 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h5><ul><li>ThreadPoolExecutor.AbortPolicy（默认）：直接拒绝任务并抛出异常</li><li>ThreadPoolExecutor.CallerRunsPolicy：调用自己的线程来执行任务</li><li>ThreadPoolExecutor.CallerRunsPolicy：直接拒绝任务，不报异常</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃掉最早的未处理任务，把新的任务加入队列</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;创建线程的方式&quot;&gt;&lt;a href=&quot;#创建线程的方式&quot; class=&quot;headerlink&quot; title=&quot;创建线程的方式&quot;&gt;&lt;/a&gt;创建线程的方式&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;继承&lt;strong&gt;Thread&lt;/strong&gt;类&lt;/li&gt;
&lt;li&gt;实现&lt;stron</summary>
      
    
    
    
    <category term="面试" scheme="https://qun-qq.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="Java" scheme="https://qun-qq.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://qun-qq.github.io/2024/10/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://qun-qq.github.io/2024/10/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-10-05T03:48:26.000Z</published>
    <updated>2024-10-21T03:47:58.508Z</updated>
    
    <content type="html"><![CDATA[<h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><ul><li>进程是一个程序的实例</li><li>线程是轻量级进程，一个进程可以包含多个线程，同一个进程的所有线程可以共享进程的资源（内存空间、文件句柄、网络连接等），每个线程也拥有自己的资源（程序计数器、虚拟机栈、本地方法栈）</li><li>线程执行开销小，不利于资源的管理和保护，进程相反</li></ul><h4 id="线程间同步方式"><a href="#线程间同步方式" class="headerlink" title="线程间同步方式"></a>线程间同步方式</h4><ol><li>互斥锁</li><li>读写锁</li><li>信号量</li><li>屏障</li><li>事件：wait&#x2F;notify</li></ol><h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4><ul><li>创建状态：进程刚被创建，还未就绪</li><li>就绪状态：进程处于可以运行并准备运行的状态</li><li>运行状态：进程在就绪状态时被分配到cpu就会在cpu上运行，即为运行状态</li><li>阻塞状态：进程因等待别的资源或IO操作而暂停运行</li><li>结束状态：进程从系统中消失</li></ul><h4 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h4><ol><li>管道&#x2F;匿名管道：父子进程间或兄弟进程间的通信</li><li>有名管道：匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 <strong>先进先出(First In First Out)</strong> 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</li><li>信号：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生</li><li>消息队列：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。<strong>消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。</strong></li><li>信号量：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li><li>共享内存</li><li>套接字</li></ol><h4 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h4><ul><li>僵尸进程：子进程已经终止，但是其父进程仍在运行，且父进程没有调用 wait()或 waitpid()等系统调用来获取子进程的状态信息，释放子进程占用的资源，导致子进程的 PCB 依然存在于系统中，但无法被进一步使用。这种情况下，子进程被称为“僵尸进程”。避免僵尸进程的产生，父进程需要及时调用 wait()或 waitpid()系统调用来回收子进程。</li><li>孤儿进程：一个进程的父进程已经终止或者不存在，但是该进程仍在运行。这种情况下，该进程就是孤儿进程。孤儿进程通常是由于父进程意外终止或未及时调用 wait()或 waitpid()等系统调用来回收子进程导致的。为了避免孤儿进程占用系统资源，操作系统会将孤儿进程的父进程设置为 init 进程（进程号为 1），由 init 进程来回收孤儿进程的资源。</li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul><li>死锁：多个进程或线程同时阻塞，都在等待资源释放。由于进程&#x2F;线程被无限阻塞，因此程序不可能正常终止。</li></ul><h4 id="死锁的必要条件"><a href="#死锁的必要条件" class="headerlink" title="死锁的必要条件"></a>死锁的必要条件</h4><ol><li>互斥：资源不能被共享，同一时间只能有一个进程或线程使用。</li><li>非抢占：资源不能被抢占，当前正在使用的进程或线程用完后才会被释放。</li><li>占有并等待</li><li>循环等待</li></ol><h4 id="如何解决死锁"><a href="#如何解决死锁" class="headerlink" title="如何解决死锁"></a>如何解决死锁</h4><p>从四个条件入手：</p><ol><li>解决<strong>互斥</strong>：使得资源可以同时被多个线程或进程使用，缺点是很多资源是必须独享的</li><li>解决<strong>非抢占</strong>：采用剥夺式调度算法，缺点是会导致资源利用率下降。</li></ol><p>这两种都不太适合</p><ol start="3"><li>解决<strong>占有并等待</strong>和<strong>循环等待</strong>：<ul><li>静态分配：让进程或线程执行前先获取到所有需要的资源，缺点是会降低资源利用率</li><li>层次分配：</li><li>使用算法（例如<strong>银行家算法</strong>）判断线程是否安全，若能够进入到安全的状态，则就 <strong>真的分配资源给该进程</strong></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;&lt;/a&gt;进程和线程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进程是一个程序的实例&lt;/li&gt;
&lt;li&gt;线程是轻量级进程，一个进程可以包含多个线程，同一个进程的所有线程</summary>
      
    
    
    
    <category term="面试" scheme="https://qun-qq.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="线程" scheme="https://qun-qq.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>c++笔记</title>
    <link href="https://qun-qq.github.io/2024/07/16/c-%E7%AC%94%E8%AE%B0/"/>
    <id>https://qun-qq.github.io/2024/07/16/c-%E7%AC%94%E8%AE%B0/</id>
    <published>2024-07-16T04:01:13.000Z</published>
    <updated>2024-07-16T04:03:53.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>数量少用unordered_set&lt;&gt;</p><p>数量多用set&lt;&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h1&gt;&lt;h2 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
    <category term="c++" scheme="https://qun-qq.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>mysql使用规范</title>
    <link href="https://qun-qq.github.io/2024/06/20/mysql%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>https://qun-qq.github.io/2024/06/20/mysql%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</id>
    <published>2024-06-20T01:01:46.000Z</published>
    <updated>2024-06-20T01:07:41.308Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://developer.aliyun.com/article/1318440?spm=a2c6h.14164896.0.0.3e8647c58sQaQk&scm=20140722.S_community@@%E6%96%87%E7%AB%A0@@1318440._.ID_1318440-RL_%E6%8A%80%E6%9C%AF%E5%90%8C%E5%AD%A6%E5%BF%85%E4%BC%9A%E7%9A%84MySQL%E8%AE%BE%E8%AE%A1%E8%A7%84%E7%BA%A6%E9%83%BD%E6%98%AF%E6%83%A8%E7%97%9B%E7%9A%84%E6%95%99%E8%AE%AD-LOC_search~UND~community~UND~item-OR_ser-V_3-P0_0">技术同学必会的MySQL设计规约，都是惨痛的教训</a></p><p>sss</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载自：&lt;a href=&quot;https://developer.aliyun.com/article/1318440?spm=a2c6h.14164896.0.0.3e8647c58sQaQk&amp;scm=20140722.S_community@@%E6%96%87%E7%AB</summary>
      
    
    
    
    <category term="笔记" scheme="https://qun-qq.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="mysql" scheme="https://qun-qq.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>树-代码模板</title>
    <link href="https://qun-qq.github.io/2024/06/15/%E6%A0%91-%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    <id>https://qun-qq.github.io/2024/06/15/%E6%A0%91-%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</id>
    <published>2024-06-14T22:21:24.000Z</published>
    <updated>2024-07-11T23:22:19.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h2><p>建树。。。</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; segmentTree;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> s, <span class="type">int</span> e, vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == e) &#123;</span><br><span class="line">            segmentTree[node] = nums[s];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = s + (e - s) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">1</span>, s, m, nums);</span><br><span class="line">        <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e, nums);</span><br><span class="line">        segmentTree[node] = segmentTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmentTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val, <span class="type">int</span> node, <span class="type">int</span> s, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == e) &#123;</span><br><span class="line">            segmentTree[node] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = s + (e - s) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">change</span>(index, val, node * <span class="number">2</span> + <span class="number">1</span>, s, m);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">change</span>(index, val, node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        segmentTree[node] = segmentTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmentTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">range</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> node, <span class="type">int</span> s, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == s &amp;&amp; right == e) &#123;</span><br><span class="line">            <span class="keyword">return</span> segmentTree[node];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = s + (e - s) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(left, right, node * <span class="number">2</span> + <span class="number">1</span>, s, m);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(left, right, node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(left, m, node * <span class="number">2</span> + <span class="number">1</span>, s, m) + <span class="built_in">range</span>(m + <span class="number">1</span>, right, node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) : <span class="built_in">n</span>(nums.<span class="built_in">size</span>()), <span class="built_in">segmentTree</span>(nums.<span class="built_in">size</span>() * <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(index, val, <span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">range</span>(left, right, <span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ZKW线段树"><a href="#ZKW线段树" class="headerlink" title="ZKW线段树"></a>ZKW线段树</h2><p>利用位运算。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> tr[<span class="number">500000</span>];</span><br><span class="line">    <span class="type">int</span> pre_len=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//更新下标为index的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> diff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = index + pre_len; i &gt; <span class="number">0</span> ; i &gt;&gt;= <span class="number">1</span>) tr[i] += diff;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新下标为index的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> diff = value - tr[index + pre_len];</span><br><span class="line">        <span class="built_in">update</span>(index, diff);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//求闭区间[left, right]的和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = left + pre_len, j = right + pre_len; i &lt;= j; i &gt;&gt;= <span class="number">1</span>, j &gt;&gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>) res += tr[i++];</span><br><span class="line">            <span class="keyword">if</span>(j % <span class="number">2</span> == <span class="number">0</span>) res += tr[j--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(prelen &lt; n) prelen &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="built_in">sizeof</span>(tr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="字典树（前缀树）"><a href="#字典树（前缀树）" class="headerlink" title="字典树（前缀树）"></a>字典树（前缀树）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    vector&lt;Trie*&gt; chs;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">    <span class="built_in">Trie</span>() : <span class="built_in">chs</span>(<span class="number">26</span>), <span class="built_in">cost</span>(<span class="number">-1</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string&amp; s, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>&amp; ch : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;chs[ch - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                node-&gt;chs[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;chs[ch - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;cost = node-&gt;cost == <span class="number">-1</span> ? val : <span class="built_in">min</span>(node-&gt;cost, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;线段树&quot;&gt;&lt;a href=&quot;#线段树&quot; class=&quot;headerlink&quot; title=&quot;线段树&quot;&gt;&lt;/a&gt;线段树&lt;/h1&gt;&lt;h2 id=&quot;普通写法&quot;&gt;&lt;a href=&quot;#普通写法&quot; class=&quot;headerlink&quot; title=&quot;普通写法&quot;&gt;&lt;/a&gt;普通写法&lt;/h2&gt;&lt;p&gt;建树。。。&lt;/p&gt;</summary>
    
    
    
    <category term="代码模板" scheme="https://qun-qq.github.io/categories/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="c++" scheme="https://qun-qq.github.io/tags/c/"/>
    
    <category term="树" scheme="https://qun-qq.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>markdown文件插入图片</title>
    <link href="https://qun-qq.github.io/2024/06/14/markdown%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>https://qun-qq.github.io/2024/06/14/markdown%E6%96%87%E4%BB%B6%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</id>
    <published>2024-06-14T07:33:43.000Z</published>
    <updated>2024-06-14T07:40:10.447Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://zhuanlan.zhihu.com/p/280758822">https://zhuanlan.zhihu.com/p/280758822</a></p><ol><li><p>直接粘贴图片到md文件</p></li><li><p>右键保存到hexo文章对应的文件夹</p></li><li><p>修改图片链接为相对路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章名/xxx.png</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/280758822&quot;&gt;https://zhuanlan.zhihu.com/p/280758822&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;直接粘贴图片到md文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://qun-qq.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="hexo" scheme="https://qun-qq.github.io/tags/hexo/"/>
    
    <category term="markdown" scheme="https://qun-qq.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>图片测试</title>
    <link href="https://qun-qq.github.io/2024/06/14/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
    <id>https://qun-qq.github.io/2024/06/14/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</id>
    <published>2024-06-14T07:26:53.000Z</published>
    <updated>2024-06-14T07:32:27.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-way1"><a href="#1-way1" class="headerlink" title="1 way1"></a>1 way1</h1><img src="/2024/06/14/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-07-26%20151020.png" class="" title="屏幕截图 2023-07-26 151020"><p>1ss</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-way1&quot;&gt;&lt;a href=&quot;#1-way1&quot; class=&quot;headerlink&quot; title=&quot;1 way1&quot;&gt;&lt;/a&gt;1 way1&lt;/h1&gt;&lt;img src=&quot;/2024/06/14/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%9</summary>
      
    
    
    
    
    <category term="test" scheme="https://qun-qq.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用说明</title>
    <link href="https://qun-qq.github.io/2024/06/14/hexo%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://qun-qq.github.io/2024/06/14/hexo%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2024-06-14T06:44:15.000Z</published>
    <updated>2024-06-14T07:03:45.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境初始化"><a href="#环境初始化" class="headerlink" title="环境初始化"></a>环境初始化</h1><ol><li><p>下载安装git。。。</p></li><li><p>下载安装node.js…</p></li><li><p>把项目clone到本地</p></li><li><p>项目根目录安装hexo</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n [文章类型] &quot;文章名&quot;&#x27;</span><br><span class="line">example: hexo n &quot;第一篇文章&quot;</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除</span><br><span class="line">hexo g # 生成页面</span><br><span class="line">hexo d # 部署</span><br><span class="line">hexo s # 启动本地服务</span><br></pre></td></tr></table></figure><h1 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;修改说明&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境初始化&quot;&gt;&lt;a href=&quot;#环境初始化&quot; class=&quot;headerlink&quot; title=&quot;环境初始化&quot;&gt;&lt;/a&gt;环境初始化&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载安装git。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载安装node.js…&lt;/p&gt;
&lt;/li</summary>
      
    
    
    
    <category term="笔记" scheme="https://qun-qq.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="hexo" scheme="https://qun-qq.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法参考</title>
    <link href="https://qun-qq.github.io/2023/08/04/markdown%E5%8F%82%E8%80%83/"/>
    <id>https://qun-qq.github.io/2023/08/04/markdown%E5%8F%82%E8%80%83/</id>
    <published>2023-08-04T07:47:34.000Z</published>
    <updated>2024-06-15T03:31:01.258Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_40818172/article/details/126260661">https://blog.csdn.net/qq_40818172/article/details/126260661</a></p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>用一到六个 ‘#’ 加一个空格接标题内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># text</span><br><span class="line">## text</span><br><span class="line">### text</span><br></pre></td></tr></table></figure><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>星号或下划线包裹内容，单是斜体，双是粗体，三是粗斜体</p><table><thead><tr><th>写法</th><th>效果</th></tr></thead><tbody><tr><td>*这是斜体*</td><td><em>这是斜体</em></td></tr><tr><td>_这是斜体_</td><td>这是斜体</td></tr><tr><td>*<em>这是粗体</em>*</td><td><strong>这是粗体</strong></td></tr><tr><td>_<em>这是粗体</em>_</td><td><strong>这是粗体</strong></td></tr><tr><td>*<strong>这是粗斜体</strong>*</td><td><em><strong>这是粗斜体</strong></em></td></tr><tr><td>_<strong>这是粗斜体</strong>_</td><td><em><strong>这是粗斜体</strong></em></td></tr><tr><td>~~这是删除线~~</td><td><del>这是删除线</del></td></tr><tr><td>&lt;u&gt;这是下划线</u></td><td><u>这是下划线</u></td></tr></tbody></table><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>用 ‘|’ 字符分隔内容即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|表头1|表头2|</span><br><span class="line">|t1|t2|</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ctrl+enter自动添加新行</p><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><ul><li>直接在一句话后敲两个空格</li><li>两句话之间加一个空行</li><li>如果你在编辑的时候，想让一行文字在显示的时候换行，就在中间加<code>&lt;br/&gt;</code></li></ul><p>三个  &#96;  （飘号）对应文本框，效果：</p><p>`&#96;&#96;文本</p><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文本</span><br></pre></td></tr></table></figure><h1 id="摘要标记符"><a href="#摘要标记符" class="headerlink" title="摘要标记符"></a>摘要标记符</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>任意位置添加，之前的内容为摘要，在hexo中可用post.excerpt获取。</p><span id="more"></span><h1 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一对飘号可以标记代码内容 dsada `print()` sss</span><br></pre></td></tr></table></figure><p>效果：dsada <code>print()</code> sss</p><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。</p><p>你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><p>效果：</p><hr><hr><pre><code>* **** * * *</code></pre><hr><hr><hr><ul><li><ul><li></li></ul></li></ul><hr><hr><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>使用星号和下划线作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 标签包围，用两个或_包起来的话，则会被加粗</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure><p>效果：</p><p><em>qqq</em></p><p><em>qqq</em></p><p><strong>qqq</strong></p><p><strong>qqq</strong></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line">&lt;链接地址&gt;</span><br><span class="line">即是：</span><br><span class="line">[link](https://www.baidu.com)</span><br><span class="line">或者</span><br><span class="line">&lt;https://www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">link</a></p><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 文字引用 </span><br></pre></td></tr></table></figure><blockquote><p>qq</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;第一层嵌套引用</span><br><span class="line">&gt;&gt;第二层嵌套引用</span><br><span class="line">&gt;第三层嵌套引用</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>111</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>222</p></blockquote></blockquote><blockquote><p>333</p></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表文字</span><br><span class="line">* 无序列表文字</span><br><span class="line">* 无序列表文字</span><br></pre></td></tr></table></figure><ul><li>q</li><li>q</li><li>q</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ 无序列表文字</span><br><span class="line">+ 无序列表文字</span><br><span class="line">+ 无序列表文字</span><br></pre></td></tr></table></figure><ul><li>q</li><li>q</li><li>q</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表文字</span><br><span class="line">- 无序列表文字</span><br><span class="line">- 无序列表文字</span><br></pre></td></tr></table></figure><ul><li><p>q</p></li><li><p>q</p></li><li><p>q</p></li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br></pre></td></tr></table></figure><ol><li>q</li><li>q</li><li>q</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_40818172/article/details/126260661&quot;&gt;https://blog.csdn.net/qq_40818172/article/details/126260661&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;p&gt;用一到六个 ‘#’ 加一个空格接标题内容&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### text&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;字体&quot;&gt;&lt;a href=&quot;#字体&quot; class=&quot;headerlink&quot; title=&quot;字体&quot;&gt;&lt;/a&gt;字体&lt;/h1&gt;&lt;p&gt;星号或下划线包裹内容，单是斜体，双是粗体，三是粗斜体&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;写法&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;*这是斜体*&lt;/td&gt;
&lt;td&gt;&lt;em&gt;这是斜体&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_这是斜体_&lt;/td&gt;
&lt;td&gt;这是斜体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;em&gt;这是粗体&lt;/em&gt;*&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;这是粗体&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;em&gt;这是粗体&lt;/em&gt;_&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;这是粗体&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;strong&gt;这是粗斜体&lt;/strong&gt;*&lt;/td&gt;
&lt;td&gt;&lt;em&gt;&lt;strong&gt;这是粗斜体&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;strong&gt;这是粗斜体&lt;/strong&gt;_&lt;/td&gt;
&lt;td&gt;&lt;em&gt;&lt;strong&gt;这是粗斜体&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~~这是删除线~~&lt;/td&gt;
&lt;td&gt;&lt;del&gt;这是删除线&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;u&amp;gt;这是下划线&lt;/u&gt;&lt;/td&gt;
&lt;td&gt;&lt;u&gt;这是下划线&lt;/u&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h1&gt;&lt;p&gt;用 ‘|’ 字符分隔内容即可&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|表头1|表头2|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|t1|t2|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;ctrl+enter自动添加新行&lt;/p&gt;
&lt;h1 id=&quot;换行&quot;&gt;&lt;a href=&quot;#换行&quot; class=&quot;headerlink&quot; title=&quot;换行&quot;&gt;&lt;/a&gt;换行&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;直接在一句话后敲两个空格&lt;/li&gt;
&lt;li&gt;两句话之间加一个空行&lt;/li&gt;
&lt;li&gt;如果你在编辑的时候，想让一行文字在显示的时候换行，就在中间加&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三个  &amp;#96;  （飘号）对应文本框，效果：&lt;/p&gt;
&lt;p&gt;`&amp;#96;&amp;#96;文本&lt;/p&gt;
&lt;figure class=&quot;highlight cc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;文本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;摘要标记符&quot;&gt;&lt;a href=&quot;#摘要标记符&quot; class=&quot;headerlink&quot; title=&quot;摘要标记符&quot;&gt;&lt;/a&gt;摘要标记符&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;任意位置添加，之前的内容为摘要，在hexo中可用post.excerpt获取。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://qun-qq.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="markdown" scheme="https://qun-qq.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>pht</title>
    <link href="https://qun-qq.github.io/2023/07/31/pht/"/>
    <id>https://qun-qq.github.io/2023/07/31/pht/</id>
    <published>2023-07-31T07:58:08.000Z</published>
    <updated>2024-07-11T00:32:59.568Z</updated>
    
    <content type="html"><![CDATA[<p>#1 phone</p><p>ds</p><p><img src="/2023/07/31/pht/part.jpg"></p><p>ddd</p><p>dasd</p><p><img src="/2023/07/31/pht/image.png" alt="image-20230804154505779"></p><p>ddogg</p><p>qq</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#1 phone&lt;/p&gt;
&lt;p&gt;ds&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/07/31/pht/part.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;ddd&lt;/p&gt;
&lt;p&gt;dasd&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/07/31/pht/image.png&quot; alt=&quot;im</summary>
      
    
    
    
    
    <category term="phote" scheme="https://qun-qq.github.io/tags/phote/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://qun-qq.github.io/2023/07/29/hello-world/"/>
    <id>https://qun-qq.github.io/2023/07/29/hello-world/</id>
    <published>2023-07-29T09:49:07.107Z</published>
    <updated>2023-08-03T02:52:59.907Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="hello" scheme="https://qun-qq.github.io/categories/hello/"/>
    
    
  </entry>
  
</feed>
